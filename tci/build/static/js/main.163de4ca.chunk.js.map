{"version":3,"sources":["tci.js","App.js","serviceWorker.js","index.js"],"names":["tci","weight","bolus","rate","v1","v2","v3","c1","c2","c3","data","console","log","push","t","i","a01","a1","a2","a3","a10","Math","pow","a12","a13","a21","a31","App","props","state","wgt","bol","xTickValues","React","createRef","this","loadGraph","event","setState","current","value","d","x","y","numOfTicks","floor","length","Container","fluid","Row","Col","className","Alert","variant","xs","Form","Group","InputGroup","Prepend","Text","style","width","Control","as","type","ref","defaultValue","Append","Button","onClick","formChange","bind","padding","top","bottom","left","right","maxDomain","label","tickLabels","fontSize","grid","stroke","tickValues","dependentAxis","axisLabelComponent","dy","colorScale","border","fill","labels","name","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.163de4ca.chunk.js","sourcesContent":["function tci(weight, bolus, rate) {\n    const kv1 = 0.228;       // L per kg\n    const kv2 = 0.463;\n    const kv3 = 2.893;\n    const k10 = 0.119;      // min ^ -1\n    const k12 = 0.112;\n    const k13 = 0.042;\n    const k21 = 0.055;\n    const k31 = 0.0033;\n    const keo = 0.26;\n\n    const time = 1200;      // s\n    //const weight = 70;      // kg\n    //const bolus = 150;      // mg\n    //const rate = 25;       // mcg/kg/min\n\n    const v1 = weight * kv1;\n    const v2 = weight * kv2;\n    const v3 = weight * kv3;\n\n    var c1 = bolus / v1;    // mg per L == mcg per mL\n    var c2 = 0;\n    var c3 = 0;\n\n    var data = [];\n\n    console.log(`Starting Marsh model for ${weight} kg individual with ${bolus} mg bolus.`);\n    console.log(`V1: ${v1}; V2: ${v2}; V3: ${v3}`);\n\n    data.push({\n        t: 0,\n        c1: c1,\n        c2: c2,\n        c3: c3,\n    });\n\n    for(let i = 1; i < time; i++) {\n        let a01 = (rate * weight * 1/60) / 1000;\n\n        let a1 = c1 * v1;\n        let a2 = c2 * v2;\n        let a3 = c3 * v3;\n\n        let a10 = a1 - (a1 * Math.pow(1 - k10, 1/60));\n        let a12 = a1 - (a1 * Math.pow(1 - k12, 1/60));\n        let a13 = a1 - (a1 * Math.pow(1 - k13, 1/60));\n\n        let a21 = a2 - (a2 * Math.pow(1 - k21, 1/60));\n        let a31 = a3 - (a3 * Math.pow(1 - k31, 1/60));\n\n        c1 = (a1 - a10 - a12 - a13 + a01 + a21 + a31) / v1;\n        c2 = (a2 - a21 + a12) / v2;\n        c3 = (a3 - a31 + a13) / v3;\n\n        data.push({\n            t: i,\n            c1: c1,\n            c2: c2,\n            c3: c3,\n        });\n    }\n\n    for(let i of data) {\n        console.log(i.t, i.c1, i.c2, i.c3);\n    }\n\n    return data;\n}\n\nexport default tci;","import React from 'react';\nimport { VictoryChart, VictoryLine, VictoryAxis, VictoryLabel, VictoryLegend } from 'victory';\nimport { Container, Form, InputGroup, Col, Button, Row, Alert } from 'react-bootstrap';\n\nimport './App.css';\nimport tci from './tci.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      wgt: 70,\n      bol: 100,\n      rate: 100,\n      c1: [],\n      c2: [],\n      c3: [],\n      xTickValues: [0]\n    }\n\n    this.wgt = React.createRef();\n    this.bol = React.createRef();\n    this.rate = React.createRef();\n  }\n\n  componentDidMount() {\n    this.loadGraph();\n  }\n\n  formChange(event) {\n    this.setState({\n      wgt: this.wgt.current.value,\n      bol: this.bol.current.value,\n      rate: this.rate.current.value\n    });\n    this.loadGraph();\n  }\n\n  loadGraph() {\n    let d = tci(this.state.wgt, this.state.bol, this.state.rate);\n\n    let c1 = [];\n    let c2 = [];\n    let c3 = [];\n\n    for(let i of d) {\n      c1.push({x: i.t, y: i.c1});\n      c2.push({x: i.t, y: i.c2});\n      c3.push({x: i.t, y: i.c3});\n    }\n    \n    let numOfTicks = Math.floor(c1.length/60);\n\n    let xTickValues = [0];\n\n    for(let i = 0; i < numOfTicks; i++) {\n      xTickValues.push((i+1) * 60);\n    }\n\n    this.setState({\n      c1: c1,\n      c2: c2,\n      c3: c3,\n      xTickValues: xTickValues\n    })\n  }\n\n  render() {\n    return (\n      <Container fluid>\n        <Row>\n          <Col className='mt-3'>\n            <Alert variant='secondary'>\n              This is a simple tool to model drug compartment concentration. Select a PK model, then fill in the required parameters and press Update.\n            </Alert>\n            <Alert variant='danger'>\n              IMPORTANT: This tool is actively under development and has not been validated for clinical use.\n            </Alert>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={3} className='pt-3'>\n            <Form>\n              <Form.Group>\n                <InputGroup>\n                  <InputGroup.Prepend>\n                    <InputGroup.Text style={{width: 75}}>Model</InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <Form.Control as='select'>\n                    <option>Marsh (propofol)</option>\n                    <option>Minto (remifentanil)</option>\n                    <option>Custom</option>\n                  </Form.Control>\n                </InputGroup>\n              </Form.Group>\n              <Form.Group>\n                <InputGroup>\n                  <InputGroup.Prepend>\n                    <InputGroup.Text style={{width: 75}}>Weight</InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <Form.Control type='text' ref={this.wgt} defaultValue={this.state.wgt} />\n                  <InputGroup.Append>\n                    <InputGroup.Text>kg</InputGroup.Text>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Form.Group>\n              <Form.Group>\n                <InputGroup>\n                  <InputGroup.Prepend>\n                    <InputGroup.Text style={{width: 75}}>Bolus</InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <Form.Control type='text' ref={this.bol} defaultValue={this.state.bol} />\n                  <InputGroup.Append>\n                    <InputGroup.Text>mg</InputGroup.Text>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Form.Group>\n              <Form.Group>\n                <InputGroup>\n                  <InputGroup.Prepend>\n                    <InputGroup.Text style={{width: 75}}>Rate</InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <Form.Control type='text' ref={this.rate} defaultValue={this.state.rate} />\n                  <InputGroup.Append>\n                    <InputGroup.Text>mcg/kg/min</InputGroup.Text>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Form.Group>\n              <Form.Group>\n                <Button onClick={this.formChange.bind(this)}>\n                  Update\n                </Button>\n              </Form.Group>\n            </Form>\n            <p>&copy; 2020 David Olmstead</p>\n          </Col>\n          <Col xs={9}>\n            <VictoryChart\n              padding={{top: 10, bottom: 50, left: 50, right: 10}}\n              maxDomain={{y: 8}} >\n              <VictoryAxis\n                label='Time (s)'\n                style={{ \n                  tickLabels: { fontSize: 5 },\n                  grid: { stroke: '#AAAAAA' }\n                }}\n                tickValues={this.state.xTickValues} />\n              <VictoryAxis\n                dependentAxis\n                label='Conc (mcg/mL)'\n                style={{ tickLabels: { fontSize: 5 } }}\n                axisLabelComponent={<VictoryLabel dy={-10} />} />\n              <VictoryLine\n                style={{\n                  data: { stroke: '#000000' }\n                }}\n                data={this.state.c1} />\n              <VictoryLine\n                style={{\n                  data: { stroke: '#888888' }\n                }}\n                data={this.state.c2} />\n              <VictoryLine\n                style={{\n                  data: { stroke: '#CCCCCC' }\n                }}\n                data={this.state.c3} />\n              <VictoryLegend\n                x={250}\n                y={50}\n                colorScale={[ '#000000', '#888888', '#CCCCCC' ]}\n                style={{\n                  border: { fill: '#FFF', stroke: '#000' },\n                  labels: { fontSize: 10 }\n                }}\n                data={[\n                  {name: 'C1 (Plasma)'},\n                  {name: 'C2 (Vessel-Rich)'},\n                  {name: 'C3 (Vessel-Poor)'}\n                ]} />\n            </VictoryChart>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}